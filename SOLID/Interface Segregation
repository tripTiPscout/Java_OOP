package Training;

public class Main {
    public static void main(String[] args) {
        
    }
}

interface UserAccount {
    String getEmail();

    String getPasswordHash();
}

interface UserAccountModel {
    boolean getRequireUniqueEmail();

    int getMinRequiredPasswordLength();

    int getMaxRequiredPasswordLength();

    void register(String username, String password);

    void login(String username, String password);

    void changePassword(String oldPass, String newPass);

    Iterable<UserAccount> getAllUsersOnline();

    Iterable<UserAccount> getAllUsers();

    UserAccount getUserByName(String name);
}

class AccountController {
    private final UserAccountModel manager;

    public AccountController(UserAccountModel manager) {
        this.manager = manager;
    }
    
    public void changePassword(String oldPass,String newPass){
        this.manager.changePassword(oldPass,newPass);
    }
}

class UserAccountModelManager implements UserAccountModel {
    private boolean requireUniqueEmail;

    private int minRequiredPasswordLength;

    private int maxRequiredPasswordLength;


    @Override
    public boolean getRequireUniqueEmail() {
        return this.requireUniqueEmail;
    }

    @Override
    public int getMinRequiredPasswordLength() {
        return this.minRequiredPasswordLength;
    }

    @Override
    public int getMaxRequiredPasswordLength() {
        return this.maxRequiredPasswordLength;
    }

    @Override
    public void register(String username, String password) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void login(String username, String password) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void changePassword(String oldPass, String newPass) {
        //change password
    }

    @Override
    public Iterable<UserAccount> getAllUsersOnline() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Iterable<UserAccount> getAllUsers() {
        throw new UnsupportedOperationException();
    }

    @Override
    public UserAccount getUserByName(String name) {
        throw new UnsupportedOperationException();
    }
}
