package OOP;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

public class Main {

    public static class MethodComparatorByName implements Comparator<Method> {
        @Override
        public int compare(Method first, Method second) {
            return first.getName().compareTo(second.getName());
        }
    }

    public static void main(String[] args) {


        Class<Reflection> clazz = Reflection.class;

        Method[] declMethods = clazz.getDeclaredMethods();

        Set<Field> fields = new TreeSet<>(Comparator.comparing(Field::getName));
        Set<Method> getters = new TreeSet<>(new MethodComparatorByName());
        Set<Method> setters = new TreeSet<>(new MethodComparatorByName());

        fields.addAll(Arrays.stream(clazz.getDeclaredFields())
                .filter(field -> !Modifier.isPrivate(field.getModifiers())).toList());

        System.out.println(fields.stream()
                .map(field -> field.getName() + " must be private!")
                .collect(Collectors.joining(System.lineSeparator())));

        for (Method method : declMethods) {
            String name = method.getName();
            int modifiers = method.getModifiers();
            if (name.startsWith("get") && !Modifier.isPublic(modifiers)) {
                getters.add(method);
            } else if (name.startsWith("set") && !Modifier.isPrivate(modifiers)) {
                setters.add(method);
            }
        }

        System.out.println(getters.stream()
                .map(getter -> getter.getName() + " have to be public!")
                .collect(Collectors.joining(System.lineSeparator())));


        System.out.println(setters.stream()
                .map(setter -> setter.getName() + " have to be private!")
                .collect(Collectors.joining(System.lineSeparator())));
    }

}

class Reflection implements Serializable {

    private static final String nickName = "Pinguin";
    public String name;
    protected String webAddress;
    String email;
    private int zip;

    public Reflection() {
        this.setName("Java");
        this.setWebAddress("oracle.com");
        this.setEmail("mail@oracle.com");
        this.setZip(1407);
    }

    private Reflection(String name, String webAddress, String email) {
        this.setName(name);
        this.setWebAddress(webAddress);
        this.setEmail(email);
        this.setZip(2300);
    }

    protected Reflection(String name, String webAddress, String email, int zip) {
        this.setName(name);
        this.setWebAddress(webAddress);
        this.setEmail(email);
        this.setZip(2300);
    }

    public final String getName() {
        return name;
    }

    private void setName(String name) {
        this.name = name;
    }

    protected String getWebAddress() {
        return webAddress;
    }

    private void setWebAddress(String webAddress) {
        this.webAddress = webAddress;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    protected final int getZip() {
        return zip;
    }

    private void setZip(int zip) {
        this.zip = zip;
    }

    public String toString() {
        String result = "Name: " + getName() + "\n";
        result += "WebAddress: " + getWebAddress() + "\n";
        result += "email: " + getEmail() + "\n";
        result += "zip: " + getZip() + "\n";
        return result;
    }
}
