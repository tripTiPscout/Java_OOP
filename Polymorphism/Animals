package OOP;

import java.util.List;

public class Main {

    public static void main(String[] args) {

        List<Animal> animals = List.of(new Wolf(), new Goat(), new Snake());

        for (Animal animal : animals) {
            animal.eat();
        }
        
        List<Mammal> mammals = List.of(new Wolf(), new Goat());
        
        for (Mammal mammal : mammals) {
            mammal.drinkMilk();
        }

    }

}

interface Animal {
    void eat();
}

abstract class Mammal implements Animal {
    public void drinkMilk() {
        System.out.println("drink milk");
    }

    @Override
    public abstract void eat();
}

class Wolf extends Mammal {

    @Override                         // is NOT necessary to override drinkMilk()
    public void drinkMilk() {        // it comes from parent class Mammal
        System.out.print("Wolf ");  //is override to current Mammal - Wolf
        super.drinkMilk();
    }

    @Override               // is IT necessary to implement method eat()
    public void eat() {    // because it comes from the interface Animal
        System.out.println("Wolf eats goat");
    }
}

class Snake implements Animal {
    @Override                     // is IT necessary to implement method eat()
    public void eat() {          // because it comes from the interface Animal
        System.out.println("Snake eats mouse");
    }
}

class Goat extends Mammal {

    @Override                         // is NOT necessary to override drinkMilk()
    public void drinkMilk() {        // it comes from parent class Mammal
        System.out.print("Goat ");  //is override to current Mammal - Goat
        super.drinkMilk();
    }

    @Override
    public void eat() {
        System.out.println("Goat eats grass");
    }
}
